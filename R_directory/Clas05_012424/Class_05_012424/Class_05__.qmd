---
title: "Class_05__012424"
author: "Johann Tailor"
format: pdf
date: 01.24.24
editor: visual
---

## Graphics System in R

There are many so called graphics system for R. Some of these include: **"base-R"** and other add-ons like **"ggplot2"**

```{r}
plot(cars)
```

How can we make this in the `ggplot2` It doesn't work as soon as you run it. It needs to be installed.

To install any package,

-   we use the `install.packages()` function
-   we load the package from our library of installed packages: `library(ggplot2)`

```{r}
library(ggplot2)
```

ggplot2 is a complex functions and requires to following arguments

-   data (data.frame)
-   aesthetic (how the data map to the plot)
-   geoms (type of plots: points, lines, etc)

```{r}
ggplot(cars) +
  aes(speed, dist)
```

Here ggplot was more work/typing-than base R. However, I can add more layers like this:

```{r}
ggplot(cars) +
  aes(speed, dist) +
  geom_point() +
  geom_smooth() +
  labs(title = " Old cars data") +
  theme_bw()
```
To make life easier, you can assign the whole plot to a variable and add layers to the variable such as:
 
```{r}
pl <- ggplot(cars) +
  aes(speed, dist) +
  geom_point() +
  geom_smooth() +
  labs(title = " Old cars data") +
  theme_bw()
```

```{r}
pl + geom_path()
```
To arrange data for publications, you can use `library("patchwork")`

```{r}
library("patchwork")
pl | pl
(pl/pl)
```

## Lab sheet section 6 

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes, 20)
```
>Q. Q. Use the nrow() function to find out how many genes are in this dataset. What is your answer?

```{r}
nrow(genes)
```

>Q. Use the colnames() function and the ncol() function on the genes data frame to find out what the column names are (we will need these later) and how many columns there are. How many columns did you find?

```{r}
ncol(genes)
```
>Use the table() function on the State column of this data.frame to find out how many ‘up’ regulated genes there are. What is your answer? 

```{r}
table(genes$State)
```
>Q. Using your values above and 2 significant figures. What fraction of total genes is up-regulated in this dataset?

```{r}
table(genes$State) / nrow(genes)*100

```

```{r}
round(table(genes$State) / nrow(genes)*100, 3)

```

Make a graph of the above data:

```{r}
ggplot(genes) + 
    aes(x=Condition1, y=Condition2) +
    geom_point()
```

Lets add colors:

```{r}
ggplot(genes) + 
    aes(x=Condition1, y=Condition2, col=State) +
    geom_point()
```

Lets change it up:

```{r}
p <- ggplot(genes) + 
    aes(x=Condition1, y=Condition2, col=State) +
    geom_point()
p + scale_colour_manual( values=c("blue","gray","red") )
```

Adding labels to the axis:

```{r}
ggplot(genes) + 
    aes(x=Condition1, y=Condition2, col=State, name=Gene) +
    geom_point() +
    labs(title = "Gene Table", x= "Drug Treatment", y="Control")

Interactive_plot_genes <- ggplot(genes) + 
    aes(x=Condition1, y=Condition2, col=State, name=Gene) +
    geom_point() +
    labs(title = "Gene Table", x= "Drug Treatment", y="Control")
```


Make it interactive!

**NOTE:** The plotly feature will not work for pdf format. 

```{r}
#| message: false 
library("plotly")
##ggplotly(Interactive_plot_genes)
```


How to remove the library verbage:

```{r}
#| message: false 
library("plotly")
```


## Section 7: Going Further with Gapminder feature


Making different types of plots: 

**1 - A Scatter Plot**

```{r}

library("gapminder")
library("dplyr")

gapminder_2007 <- gapminder %>% filter(year==2007)

```


```{r}
ggplot(gapminder_2007) + 
  aes(x = gdpPercap, y = lifeExp, color = pop) +
  geom_point(alpha=0.8)

```

Lets add colors to the above graph:

```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp, color=continent, size=pop) +
  geom_point(alpha=0.9)
```

Changing the size of the points:

```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp, color=continent, size=pop) +
  geom_point(alpha=0.9)+
  scale_size_area(max_size = 8)
```



**2 - Using a bar graph to plot USAarrest data:**


```{r}
#way to add a new named column
USArrests$State <- rownames(USArrests)

#Now plot:
ggplot(USArrests) +
  aes(x=reorder(State,Murder), y=Murder) +
  geom_col() + 
  coord_flip()

US_arrest <- ggplot(USArrests) +
  aes(x=reorder(State,Murder), y=Murder) +
  geom_col() + 
  coord_flip()



```

Now, lets make this graph interactive using `ggplotly`

```{r}

#ggplotly(US_arrest)
```

##Section 8: Lets animate!

Let's use gganimate to make cool graphs:

```{r}
#| eval: false

library(gapminder)
library(gganimate)

# Setup nice regular ggplot of the gapminder data
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
  geom_point(alpha = 0.7, show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  scale_x_log10() +
  # Facet by continent
  facet_wrap(~continent) +
  # Here comes the gganimate specific bits
  labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
  transition_time(year) +
  shadow_wake(wake_length = 0.1, alpha = FALSE)
```

##Section 10: Combining all plots

```{r}

library("patchwork")
(pl/pl)


```


